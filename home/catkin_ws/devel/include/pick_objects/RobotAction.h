// Generated by gencpp from file pick_objects/RobotAction.msg
// DO NOT EDIT!


#ifndef PICK_OBJECTS_MESSAGE_ROBOTACTION_H
#define PICK_OBJECTS_MESSAGE_ROBOTACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pick_objects
{
template <class ContainerAllocator>
struct RobotAction_
{
  typedef RobotAction_<ContainerAllocator> Type;

  RobotAction_()
    : action(false)
    , x(0.0)
    , y(0.0)  {
    }
  RobotAction_(const ContainerAllocator& _alloc)
    : action(false)
    , x(0.0)
    , y(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _action_type;
  _action_type action;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;





  typedef boost::shared_ptr< ::pick_objects::RobotAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pick_objects::RobotAction_<ContainerAllocator> const> ConstPtr;

}; // struct RobotAction_

typedef ::pick_objects::RobotAction_<std::allocator<void> > RobotAction;

typedef boost::shared_ptr< ::pick_objects::RobotAction > RobotActionPtr;
typedef boost::shared_ptr< ::pick_objects::RobotAction const> RobotActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pick_objects::RobotAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pick_objects::RobotAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pick_objects

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'pick_objects': ['/home/asas/workspace/rb-world/home/catkin_ws/src/pick_objects/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pick_objects::RobotAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pick_objects::RobotAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pick_objects::RobotAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pick_objects::RobotAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pick_objects::RobotAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pick_objects::RobotAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pick_objects::RobotAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "982dc1c368a80250eddaf33c1acb1d3d";
  }

  static const char* value(const ::pick_objects::RobotAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x982dc1c368a80250ULL;
  static const uint64_t static_value2 = 0xeddaf33c1acb1d3dULL;
};

template<class ContainerAllocator>
struct DataType< ::pick_objects::RobotAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pick_objects/RobotAction";
  }

  static const char* value(const ::pick_objects::RobotAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pick_objects::RobotAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool action\n\
float32 x\n\
float32 y\n\
";
  }

  static const char* value(const ::pick_objects::RobotAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pick_objects::RobotAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pick_objects::RobotAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pick_objects::RobotAction_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PICK_OBJECTS_MESSAGE_ROBOTACTION_H
